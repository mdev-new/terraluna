developmentDir = development
sourceDir = source
externDir = external
outDir = build

src = ${sourceDir}/src
obj = ${outDir}/obj
glfwSrc = ${externDir}/glfw/src

# Valid: X11, WIN32
# Cocoa too, some day ;)
platform = X11

cc = gcc
cxx = g++
ar = ar -rc

common = -march=native -mtune=native -Ofast -pipe
cflags = ${common} -std=c++14 -Wpedantic -I${src} -I${externDir}/single_file -I${externDir}/glad -I${externDir}/glfw/include
dep_cflags = ${common} -std=c99 -D_GLFW_${platform}=1 -I${externDir}/single_file -I${externDir}/glad
ldflags = ${common} -fno-pie -fdata-sections -ffunction-sections -static-libgcc -static-libstdc++ -s -Wl,--as-needed -Wl,--gc-sections

# our own code
rule cc
    depfile = ${out}.dep
    command = ${cxx} -MD -MF ${out}.dep -o ${out} -c ${in} ${cflags}
    description = cc ${out}

# c dependencies
rule depcc
    depfile = ${out}.dep
    command = ${cc} -MD -MF ${out}.dep -o ${out} -c ${in} ${dep_cflags}
    description = cc ${out}

rule link
    depfile = ${out}.dep
    command = ${cxx} -MD -MF ${out}.dep -o ${out} ${in} ${libs} ${ldflags}
    description = cc ${out}

rule ar
    command = ${ar} ${out} ${in}
    description = ar ${out}

# Building
# Platform dependent
include ./${developmentDir}/build_stuff/${platform}.ninja

# Generic
build ${obj}/unzip.o: depcc ${externDir}/single_file/unzip.c
build ${obj}/glad.o: depcc ${externDir}/glad/glad.c
build ${obj}/stb_image.o: depcc ${externDir}/single_file/stb_image.c
build ${obj}/miniaudio.o: depcc ${externDir}/single_file/miniaudio.c
build ${outDir}/external.a: ar ${obj}/glad.o ${obj}/stb_image.o ${obj}/miniaudio.o

# Our own
build ${obj}/tl_main.o: cc ${src}/Main/Main.cc
build ${obj}/tl_va.o: cc ${src}/Graphics/Render/VertexArray.cc
build ${obj}/tl_shd.o: cc ${src}/Graphics/Shaders/Shader.cc
build ${obj}/tl_tex2d.o: cc ${src}/Graphics/Textures/Texture2D.cc
build ${obj}/tl_mat4f.o: cc ${src}/Misc/Maths/Matrix4f.cc
build ${obj}/tl_aud.o: cc ${src}/Audio/Audio.cc

build ${outDir}/terraluna.a: ar $
${obj}/tl_main.o $
${obj}/tl_va.o ${obj}/tl_shd.o ${obj}/tl_tex2d.o ${obj}/tl_aud.o $
${obj}/tl_mat4f.o

build ${outDir}/tl.exe: link ${outDir}/terraluna.a ${outDir}/${platform}.a ${outDir}/external.a
  libs = ${dependentLibs}

default ${outDir}/tl.exe
